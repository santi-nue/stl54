# CMakeLists.txt
#
# Wireshark - Network traffic analyzer
# By Gerald Combs <gerald@wireshark.org>
# Copyright 1998 Gerald Combs
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

include(WiresharkPlugin)

# Plugin name and version info (major minor micro extra)
set_module_info(generic 0 5 2 0)

include(cmake_wireshark_version_number.cmake)


# Dissector core sources.
# All files specified here do NOT depend of wireshark.
set(DISSECTOR_CORE_UT_SRC
	byte_interpret.cpp byte_interpret.h
	byte_interpret_compute_expression.cpp byte_interpret_compute_expression.h
	T_expression.cpp T_expression.h
	T_generic_statistics.cpp T_generic_statistics.h
	T_interpret_data.cpp T_interpret_data.h
	T_interpret_read_values.cpp T_interpret_read_values.h
	T_interpret_byte_order.cpp T_interpret_byte_order.h
	T_interpret_output.cpp T_interpret_output.h
	T_interpret_decode.cpp T_interpret_decode.h
	T_interpret_inside_frame.cpp T_interpret_inside_frame.h
	T_interpret_chrono.cpp T_interpret_chrono.h
	T_perf_time.cpp T_perf_time.h
	T_interpret_value.cpp T_interpret_value.h
	T_attribute_value.cpp T_attribute_value.h
	T_frame_data.cpp T_frame_data.h
	T_frame_data_write.cpp T_frame_data_write.h
	T_type_definitions.cpp T_type_definitions.h
	C_value.cpp C_value.h
	C_setlocale_numeric_C_guard.cpp C_setlocale_numeric_C_guard.h
	byte_interpret_builder.cpp byte_interpret_builder.h
	byte_interpret_build_types.cpp byte_interpret_build_types.h
	byte_interpret_build_types_context.cpp byte_interpret_build_types_context.h
	byte_interpret_build_types_read_token.cpp byte_interpret_build_types_read_token.h
	byte_interpret_parse.cpp byte_interpret_parse.h
	byte_interpret_common.cpp byte_interpret_common.h
	byte_interpret_common_base.cpp byte_interpret_common_base.h
	byte_interpret_common_exception.cpp byte_interpret_common_exception.h
	byte_interpret_common_fatal.cpp byte_interpret_common_fatal.h
	byte_interpret_common_trace.cpp byte_interpret_common_trace.h
	byte_interpret_common_utils.h
	CT_debug_object_counter.cpp CT_debug_object_counter.h
	shark_wsutil_aes.c shark_wsutil_aes.h
)

set (DISSECTOR_CORE_OTHER_SRC
)

set (DISSECTOR_CORE_SRC
	${DISSECTOR_CORE_UT_SRC}
	${DISSECTOR_CORE_OTHER_SRC}
)


# Dissector helpers.  They're included in the source files in this
# directory, but they're not dissectors themselves, i.e. they're not
# used to generate "register.c").
set (DISSECTOR_SUPPORT_SRC
	${DISSECTOR_CORE_SRC}
	generic.cpp generic.h
	T_generic_protocol_data.cpp T_generic_protocol_data.h
	C_byte_interpret_wsgd_builder.cpp C_byte_interpret_wsgd_builder.h
	C_byte_interpret_wsgd_builder_base.cpp C_byte_interpret_wsgd_builder_base.h
)


set(DISSECTOR_SRC
	packet-generic.c
	${DISSECTOR_SUPPORT_SRC}
)

set(PLUGIN_FILES
	plugin.c
	${DISSECTOR_SRC}
)

set(CLEAN_FILES
	${PLUGIN_FILES}
)

if (WERROR_COMMON_FLAGS)
	set_source_files_properties(
		${CLEAN_FILES}
		PROPERTIES
# Too many errors (sign compare, ...)
#		COMPILE_FLAGS "${WERROR_COMMON_FLAGS}"
		COMPILE_FLAGS ""
	)
endif()

include_directories(${CMAKE_CURRENT_SOURCE_DIR})

register_plugin_files(plugin.c
	plugin
	${DISSECTOR_SRC}
)

add_plugin_library(generic epan)
target_link_libraries(generic epan)

install_plugin(generic epan)

file(GLOB DISSECTOR_HEADERS RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "*.h")
CHECKAPI(
	NAME
	  generic
	SWITCHES
	  -g abort -g termoutput -build
	SOURCES
	  ${DISSECTOR_SRC}
	  ${DISSECTOR_HEADERS}
)




# byte_interpret
add_executable(byte_interpret byte_interpret_main.cpp ${DISSECTOR_CORE_SRC})

set (DISSECTOR_UT_TOOLS_SRC
	${DISSECTOR_CORE_UT_SRC}
	unitary_tests_tools.cpp unitary_tests_tools.h
	T_static_executor.cpp T_static_executor.h
	T_static_executor_manager.cpp T_static_executor_manager.h
	C_perf_chrono.cpp C_perf_chrono.h
	unitary_tests_ut_interpret_bytes.cpp unitary_tests_ut_interpret_bytes.h
)

set (DISSECTOR_UT_SRC
	${DISSECTOR_UT_TOOLS_SRC}
	unitary_test_build_field.cpp
	unitary_test_build_field_bitfield_bitstream.cpp
	unitary_test_build_field_call_function.cpp
	unitary_test_build_field_const_enum.cpp
	unitary_test_build_field_invalid_syntax.cpp
	unitary_test_build_field_loop_condition.cpp
	unitary_test_build_field_misc.cpp
	unitary_test_build_field_position.cpp
	unitary_test_build_field_switch_struct.cpp
	unitary_test_build_field_ternary.cpp
	unitary_test_build_types_and_interpret_bytes.cpp
	unitary_test_decode_stream_frame.cpp
	unitary_test_decompose_left_sep_middle_sep_right.cpp
	unitary_test_decompose_type_sep_value_sep.cpp
	unitary_test_expression.cpp
	unitary_test_frame_data.cpp
	unitary_test_generic_statistics.cpp
	unitary_test_get_before_separator_after.cpp
	unitary_test_get_number.cpp
	unitary_test_interpret_forget.cpp
	unitary_test_interpret_simple.cpp
	unitary_test_interpret_simple_decoder_aes.cpp
	unitary_test_interpret_simple_decoder_base64.cpp
	unitary_test_interpret_simple_internal_frame.cpp
	unitary_test_interpret_simple_position.cpp
	unitary_test_interpret_simple_trailer.cpp
	unitary_test_is_existing_field_or_variable.cpp
	unitary_test_read_token.cpp
	unitary_test_read_token_word_cplx.cpp
	unitary_test_read_values.cpp
	unitary_test_scoped_copyable_ptr.cpp
	unitary_test_string_to_words.cpp
	unitary_test_value_format.cpp
	unitary_test_value_printf.cpp
	unitary_tests_functions.cpp
	unitary_tests_misc.cpp
)

# unitary_tests
add_executable(unitary_tests unitary_tests.cpp ${DISSECTOR_UT_SRC})
