

###############################################################################
# Function for decoder
###############################################################################

# It is silly but it is just a test
function void  decode_stream_nothing (in frame  frame, in uint32   nb_of_bits_needed)
{
  while (nb_of_bits_needed > 0)
  {
    hide uint1  bit1;
    call frame_append_data (frame, bit1);
    set nb_of_bits_needed = nb_of_bits_needed - 1;
  }
}

# It is silly but it is just a test
function void  decode_stream_nothing_byte (in frame  frame, in uint32   nb_of_bits_needed)
{
  hide var uint32   nb_of_bytes_needed = nb_of_bits_needed / 8;
  while (nb_of_bytes_needed > 0)
  {
    hide uint8  byte1;
    call frame_append_data (frame, byte1);
    set nb_of_bytes_needed = nb_of_bytes_needed - 1;
  }
}

function void  decode_stream_test16 (in frame  frame, in uint32   nb_of_bits_needed)
{
  if (nb_of_bits_needed != 16)
  {
    fatal ("decode_stream_test16 called with nb_of_bits_needed=%d (only 16 is accepted)", nb_of_bits_needed);
    return;
  }

  hide uint8  byte1;
  hide uint8  byte2;
  # It is silly but it is just a test
  call frame_append_data (frame, byte1 | byte2);
  call frame_append_data (frame, byte1 & byte2);
}

# This decoder append more data than asked (except when nb_of_bits_needed%32 == 0).
function void  decode_invert_4_bytes (in frame  frame, in uint32   nb_of_bits_needed_uint)
{
  hide var int32   nb_of_bits_needed = nb_of_bits_needed_uint;
  while (nb_of_bits_needed > 0)
  {
    hide uint8   byte1;
    hide uint8   byte2;
    hide uint8   byte3;
    hide uint8   byte4;
	# simply invert the 4 bytes read
    call frame_append_data (frame, byte4);
    call frame_append_data (frame, byte3);
    call frame_append_data (frame, byte2);
    call frame_append_data (frame, byte1);
    set nb_of_bits_needed = nb_of_bits_needed - 32;
  }
}

###############################################################################
# stringUtf8, stringUtf16Le & stringUtf16Be using decoder
###############################################################################

# NB: decoder_utf8 is now built-in
function void  decoder_utf8_is_now_builtin (in frame  frame, in uint32   nb_of_bits_needed)
{
  if ((nb_of_bits_needed % 8) != 0)
  {
    fatal "Only entire byte";
    return;
  }

  while (nb_of_bits_needed > 0)
  {
    hide uint8  byte1;
  
    if ((byte1 & 0x80) != 0)
    {
      if ((byte1 & 0xF0) == 0xF0)
      {
        hide uint8  byte2;
        hide uint8  byte3;
        hide uint8  byte4;
      }
      else
      {
        if ((byte1 & 0xE0) == 0xE0)
        {
          hide uint8  byte2;
          hide uint8  byte3;
        }
        else
        {
          hide uint8  byte2;
        }
      }
  
      set byte1 = 46; # means "." to say unknow char
    }
    
    call frame_append_data (frame, byte1);
    set nb_of_bits_needed = nb_of_bits_needed - 8;
  }
}

alias stringUtf8  string{decoder=decoder_utf8};


# NB: decoder_utf16le is now built-in
function void  decoder_utf16le_is_now_builtin (in frame  frame, in uint32   nb_of_bits_needed)
{
  if ((nb_of_bits_needed % 8) != 0)
  {
    fatal "Only entire byte";
    return;
  }

  while (nb_of_bits_needed > 0)
  {
    hide uint8  byte1;
    hide uint8  byte2;
 
    if (byte2 != 0)
    {
      set byte1 = 46; # means "." to say unknow char

      if ((byte2 & 0xfc) == 0xd8)
      {
        hide uint8  byte3;
        hide uint8  byte4;        
      }
    }
   
    call frame_append_data (frame, byte1);
    set nb_of_bits_needed = nb_of_bits_needed - 8;
  }
}

alias stringUtf16Le  string{decoder=decoder_utf16le};


# NB: decoder_utf16be is now built-in
function void  decoder_utf16be_is_now_builtin (in frame  frame, in uint32   nb_of_bits_needed)
{
  if ((nb_of_bits_needed % 8) != 0)
  {
    fatal "Only entire byte";
    return;
  }

  while (nb_of_bits_needed > 0)
  {
    hide uint8  byte2;
    hide uint8  byte1;
 
    if (byte2 != 0)
    {
      set byte1 = 46; # means "." to say unknow char

      if ((byte2 & 0xfc) == 0xd8)
      {
        hide uint8  byte3;
        hide uint8  byte4;        
      }
    }
   
    call frame_append_data (frame, byte1);
    set nb_of_bits_needed = nb_of_bits_needed - 8;
  }
}

alias stringUtf16Be  string{decoder=decoder_utf16be};


###############################################################################
# Base64 using decoder
###############################################################################

function int8  read_base64_to_int ()
{
  hide uint8  val;

  if (val >= 0x41 && val <= 0x5A)    # 0x41=A  0x5A=Z
  {
    return  val - 0x41;
  }
  if (val >= 0x61 && val <= 0x7A)    # 0x61=a  0x7A=z
  {
    return  (val - 0x61) + 26;
  }
  if (val >= 0x30 && val <= 0x39)    # 0x30=0  0x39=9
  {
    return  (val - 0x30) + 52;
  }
  if (val == 0x2B)    # 0x2B=+
  {
    return  62;
  }
  if (val == 0x2F)    # 0x2F=/
  {
    return  63;
  }
  if (val == 0x3D)    # 0x3D==
  {
    return  -1;
  }
  return  -2;
}

function void  read_base64_to_frame (in frame  frame)
{
  hide var int8  val_signed = read_base64_to_int();
  if (val_signed >= 0)
  {
    hide var uint6  val = val_signed;
	 call frame_append_data (frame, val);
	 return;
  }
  if (val_signed != -1)
  {
    fatal "Bad base64 input value";
    return;
  }
}

# NB: decoder_base64 is now built-in
function void  decoder_base64_is_now_builtin (in frame  frame, in uint32   nb_of_bits_needed_uint)
{
  hide var int32   nb_of_bits_needed = nb_of_bits_needed_uint;
  
  while (nb_of_bits_needed > 0)
  {
    call  read_base64_to_frame (frame);
    call  read_base64_to_frame (frame);
    call  read_base64_to_frame (frame);
    call  read_base64_to_frame (frame);

    set nb_of_bits_needed = nb_of_bits_needed - (4 * 6);
  }
}

# NB: base64 encoding can encode anything, not only string
# This alias is only for particular case where 1 and only 1 string is encoded.
alias stringBase64  string{decoder=decoder_base64};

# If you have many consecutive strings encoded together, you can NOT use stringBase64.
# You should do :
# decoder  decoder_base64;
# string   val1;
# string   val2;
# ...
# decoder  nil;

###############################################################################
# Print ip
###############################################################################

function string  print_ip3 ( in uint32  ip )
{
#  hide var uint8   ip_a = ( ip >> 24 ) & 255;        # NOT ok
#  hide var uint8   ip_a =  255;                      #     ok
#  hide var uint8   ip_a = ip & 255;                  # NOT ok
#  hide var uint8   ip_a = ip >> 24;                  # NOT ok
#  hide var uint32   ip_a = ip >> 24;                 # NOT ok
#  hide var uint32   ip_a = ip + 24;                  # NOT ok
  hide var uint32   ip_a = 255;
  hide var uint32   ip_b = ( ip_a >> 2 ) & 0x03;
  return  "ICIOA_print_ip";
}

function string  print_ip ( in uint32  ip )
{
  hide var uint8   ip_a = ( ip >> 24 ) & 255;
  hide var uint8   ip_b = ( ip >> 16 ) & 255;
  hide var uint8   ip_c = ( ip >>  8 ) & 255;
  hide var uint8   ip_d = ( ip       ) & 255;
  hide var string  ip_str = print("%d.%d.%d.%d", ip_a, ip_b, ip_c, ip_d);
  return  ip_str;
}

function string  print_ip4 ( in int64  ip2 )
{
  hide var uint32  ip = 49727;
  hide var uint8   ip_a = ( ip >> 24 ) & 255;
  hide var uint8   ip_b = ( ip >> 16 ) & 255;
  hide var uint8   ip_c = ( ip >>  8 ) & 255;
  hide var uint8   ip_d = ( ip       ) & 255;
  hide var string  ip_str = print("%d.%d.%d.%d", ip_a, ip_b, ip_c, ip_d);
  return  ip_str;
}

###############################################################################
# Print ip
###############################################################################

struct  T_struct_16_16
{
  uint16    val1;
  uint16    val2;
}

###############################################################################
# addition
###############################################################################

function any  addition (in any lhs, in any rhs, in string debug_message = "")
{
  if (debug_message != "")
  {
    print ("%s", debug_message);
  }
  return  (lhs + rhs) ;
}

###############################################################################
# Const
# "::" is mandatory
# Forbidden :
# - array,
# - specifications no_statement, transform, display, constrains ...
# - struct, switch, ...
###############################################################################

const uint16   konst::int = 2;
const float32  konst::flt = -2.6;
const string   konst::str = "abcdefgh - abcdefgh";

enum16 T_enum_for_const
{
  cs_start  -
}

const uint32            konst::int_enum = T_enum_for_const::cs_start;
const T_enum_for_const  konst::enum = T_enum_for_const::cs_start;

const float64  Math::PI = 3.1415927;
const float64  Math::deg_to_rad = Math::PI / 180;

const string   konst::str_fct = string.replace_all (konst::str, "bc", "xyz");

###############################################################################
# Enum
###############################################################################

enum1 T_enum1
{
  value0  0
  value1  -
}

enum2 T_enum2 expand T_enum1
{
  enu2  2
  enu3  -
}

enum3 T_enum3 expand T_enum2
{
  val4  4
  val5  -
}

enum4 T_enum4 expand T_enum3
{
  Val8  8
  Val9  -
  Val10  -
  Val11  -
  Val12  -
  Val13  -
  Val14  -
  Val15  -
}

enum5 T_enum5 as T_enum3;

enum6 T_enum6 as T_enum5;

enum8 T_enum8 as T_enum4;

enum24 T_enum24 expand T_enum5
{
  val12730334  12730334
}

###############################################################################
# switch
###############################################################################

switch T_switch
{
  case 0                     :  var string  val = "0";
  case T_enum5::enu3         :  var string  val = "enu3";
  case T_enum24::val12730334 :  var string  val = "val12730334";
  default                    :  var string  val = "default";
}

switch_expr T_switch_expr
{
  case (pinfo.fd.pipo == "tsr") :  var string  val = "tsr";
  case (pinfo.fd.pipo == "rst") :  var string  val = "rst";
  case (pinfo.fd.pipo == "str") :  var string  val = "str";
  default                       :  var string  val = "default";
}

###############################################################################
# string::npos
###############################################################################

function int64  string_find (in string  value, in string  to_find)
{
  hide var  int64  posi = string.find(value, to_find);
  hide var uint32  posu = string.find(value, to_find);
  
  if (posi != posu)
  {
    set do_not_exist_to_triger_exception = 0;
  }
  
  return  posi;
}

function bool8  string_found (in string  value, in string  to_find)
{
  hide var  int64  posi = string.find(value, to_find);
  hide var uint32  posu = string.find(value, to_find);
  hide var bool8   reti = (posi != string::npos);
  hide var bool8   retu = (posu != string::npos);

  if (posi != posu)
  {
    set do_not_exist_to_triger_exception = 0;
  }
  if (reti != retu)
  {
    set do_not_exist_to_triger_exception = 0;
  }
  
  return  reti;
}

###############################################################################
# int parameters
###############################################################################

function int64  call_me_maybe_s8 (in int8  value)
{
  return  value+1;
}
function int64  call_me_maybe_s16 (in int16  value)
{
  return  value+1;
}
function int64  call_me_maybe_s24 (in int24  value)
{
  return  value+1;
}
function int64  call_me_maybe_s32 (in int32  value)
{
  return  value+1;
}
function int64  call_me_maybe_s40 (in int40  value)
{
  return  value+1;
}
function int64  call_me_maybe_s48 (in int48  value)
{
  return  value+1;
}
function int64  call_me_maybe_s64 (in int64  value)
{
  return  value+1;
}


function int64  call_me_maybe_u8 (in uint8  value)
{
  return  value-1;
}
function int64  call_me_maybe_u16 (in uint16  value)
{
  return  value-1;
}
function int64  call_me_maybe_u24 (in uint24  value)
{
  return  value-1;
}
function int64  call_me_maybe_u32 (in uint32  value)
{
  return  value-1;
}
function int64  call_me_maybe_u40 (in uint40  value)
{
  return  value-1;
}
function int64  call_me_maybe_u48 (in uint48  value)
{
  return  value-1;
}


# uint64 does not exist
# function int64  call_me_maybe_u64 (in uint64  value)
# {
#   return  64;
# }

# Currently does not work, parameter size must be multiple of 8
function int64  call_me_maybe_u30 (in uint30  value)
{
  return  value-1;
}
function int64  call_me_maybe_u20 (in uint20  value)
{
  return  value-1;
}
function int64  call_me_maybe_u10 (in uint10  value)
{
  return  value-1;
}
function int64  call_me_maybe_u2 (in uint2  value)
{
  return  value-1;
}
function int64  call_me_maybe_u1 (in uint1  value)
{
  return  value-1;
}

###############################################################################
# out & in_out parameters
###############################################################################

function int64  test_out_normalize (in int64  value, out bool8  value_modified)
{
  set value_modified = bool8::false;
  if (value > 10)
  {
    set value = 10;
	set value_modified = bool8::true;
  }
  return  value;
}

function int64  test_in_out_normalize_accumulate (in int64      value,
                                                  out bool8     value_modified,
                                                  in_out int64  accumulate)
{
  set accumulate = accumulate + value;
  set value_modified = bool8::false;
  if (value > 10)
  {
    set value = 10;
	set value_modified = bool8::true;
  }
  return  value;
}

###############################################################################
# is_existing_field_or_variable
###############################################################################

struct T_is_existing_field_or_variable
{
  hide var bool8   is_none_begin           = is_existing_field_or_variable("");
  hide var bool8   is_not_exist_begin      = is_existing_field_or_variable("not_exist");
  hide var bool8   is_in_main_struct_begin = is_existing_field_or_variable("in_main_struct");
  hide var bool8   is_in_if_begin          = is_existing_field_or_variable("in_if");
  hide var bool8   is_in_else_begin        = is_existing_field_or_variable("in_else");
  hide var bool8   is_in_while_begin       = is_existing_field_or_variable("in_while");
 
  var int32  in_main_struct = 1;    # At least something must be displayed (for M_TEST_SIMPLE)
  
  if (1)
  {
    hide var int32  in_if = 11;
  }
  else
  {
    hide var int32  in_else = 21;
  }
  
  while (1)
  {
    hide var int32  in_while = 31;
    break;
  }
  
  hide var bool8   is_none_end           = is_existing_field_or_variable("");
  hide var bool8   is_not_exist_end      = is_existing_field_or_variable("not_exist");
  hide var bool8   is_in_main_struct_end = is_existing_field_or_variable("in_main_struct");
  hide var bool8   is_in_if_end          = is_existing_field_or_variable("in_if");
  hide var bool8   is_in_else_end        = is_existing_field_or_variable("in_else");
  hide var bool8   is_in_while_end       = is_existing_field_or_variable("in_while");
}

###############################################################################
# forget
###############################################################################

struct T_forget
{
  var int32  struct_counter = struct_counter + 1;
}

###############################################################################
#
###############################################################################

function void  return_nothing ()
{
}

function void  return_nothing_2 (in int64  value, out bool8  value_modified)
{
}
