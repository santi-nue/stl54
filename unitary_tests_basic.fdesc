

###############################################################################
# Function for decoder
###############################################################################

# It is silly but it is just a test
function void  decode_stream_nothing (in frame  frame, in uint32   nb_of_bits_needed)
{
  while (nb_of_bits_needed > 0)
  {
    hide uint1  bit1;
    call frame_append_data (frame, bit1);
    set nb_of_bits_needed = nb_of_bits_needed - 1;
  }
}

# It is silly but it is just a test
function void  decode_stream_nothing_byte (in frame  frame, in uint32   nb_of_bits_needed)
{
  hide var uint32   nb_of_bytes_needed = nb_of_bits_needed / 8;
  while (nb_of_bytes_needed > 0)
  {
    hide uint8  byte1;
    call frame_append_data (frame, byte1);
    set nb_of_bytes_needed = nb_of_bytes_needed - 1;
  }
}

function void  decode_stream_test16 (in frame  frame, in uint32   nb_of_bits_needed)
{
  if (nb_of_bits_needed != 16)
  {
    fatal ("decode_stream_test16 called with nb_of_bits_needed=%d (only 16 is accepted)", nb_of_bits_needed);
    return;
  }

  hide uint8  byte1;
  hide uint8  byte2;
  # It is silly but it is just a test
  call frame_append_data (frame, byte1 | byte2);
  call frame_append_data (frame, byte1 & byte2);
}

# This decoder append more data than asked (except when nb_of_bits_needed%32 == 0).
function void  decode_invert_4_bytes (in frame  frame, in uint32   nb_of_bits_needed_uint)
{
  hide var int32   nb_of_bits_needed = nb_of_bits_needed_uint;
  while (nb_of_bits_needed > 0)
  {
    hide uint8   byte1;
    hide uint8   byte2;
    hide uint8   byte3;
    hide uint8   byte4;
	# simply invert the 4 bytes read
    call frame_append_data (frame, byte4);
    call frame_append_data (frame, byte3);
    call frame_append_data (frame, byte2);
    call frame_append_data (frame, byte1);
    set nb_of_bits_needed = nb_of_bits_needed - 32;
  }
}

###############################################################################
# stringUtf8, stringUtf16Le & stringUtf16Be using decoder
###############################################################################

function void  decoder_utf8 (in frame  frame, in uint32   nb_of_bits_needed)
{
  if ((nb_of_bits_needed % 8) != 0)
  {
    fatal "Only entire byte";
    return;
  }

  while (nb_of_bits_needed > 0)
  {
    hide uint8  byte1;
  
    if ((byte1 & 0x80) != 0)
    {
      if ((byte1 & 0xF0) == 0xF0)
      {
        hide uint8  byte2;
        hide uint8  byte3;
        hide uint8  byte4;
      }
      else
      {
        if ((byte1 & 0xE0) == 0xE0)
        {
          hide uint8  byte2;
          hide uint8  byte3;
        }
        else
        {
          hide uint8  byte2;
        }
      }
  
      set byte1 = 46; # means "." to say unknow char
    }
    
    call frame_append_data (frame, byte1);
    set nb_of_bits_needed = nb_of_bits_needed - 8;
  }
}

alias stringUtf8  string{decoder=decoder_utf8};


function void  decoder_utf16le (in frame  frame, in uint32   nb_of_bits_needed)
{
  if ((nb_of_bits_needed % 8) != 0)
  {
    fatal "Only entire byte";
    return;
  }

  while (nb_of_bits_needed > 0)
  {
    hide uint8  byte1;
    hide uint8  byte2;
 
    if (byte2 != 0)
    {
      set byte1 = 46; # means "." to say unknow char

      if ((byte2 & 0xfc) == 0xd8)
      {
        hide uint8  byte3;
        hide uint8  byte4;        
      }
    }
   
    call frame_append_data (frame, byte1);
    set nb_of_bits_needed = nb_of_bits_needed - 8;
  }
}

alias stringUtf16Le  string{decoder=decoder_utf16le};


function void  decoder_utf16be (in frame  frame, in uint32   nb_of_bits_needed)
{
  if ((nb_of_bits_needed % 8) != 0)
  {
    fatal "Only entire byte";
    return;
  }

  while (nb_of_bits_needed > 0)
  {
    hide uint8  byte2;
    hide uint8  byte1;
 
    if (byte2 != 0)
    {
      set byte1 = 46; # means "." to say unknow char

      if ((byte2 & 0xfc) == 0xd8)
      {
        hide uint8  byte3;
        hide uint8  byte4;        
      }
    }
   
    call frame_append_data (frame, byte1);
    set nb_of_bits_needed = nb_of_bits_needed - 8;
  }
}

alias stringUtf16Be  string{decoder=decoder_utf16be};


###############################################################################
# Print ip
###############################################################################

function string  print_ip3 ( in uint32  ip )
{
#  hide var uint8   ip_a = ( ip >> 24 ) & 255;        # NOT ok
#  hide var uint8   ip_a =  255;                      #     ok
#  hide var uint8   ip_a = ip & 255;                  # NOT ok
#  hide var uint8   ip_a = ip >> 24;                  # NOT ok
#  hide var uint32   ip_a = ip >> 24;                 # NOT ok
#  hide var uint32   ip_a = ip + 24;                  # NOT ok
  hide var uint32   ip_a = 255;
  hide var uint32   ip_b = ( ip_a >> 2 ) & 0x03;
  return  "ICIOA_print_ip";
}

function string  print_ip ( in uint32  ip )
{
  hide var uint8   ip_a = ( ip >> 24 ) & 255;
  hide var uint8   ip_b = ( ip >> 16 ) & 255;
  hide var uint8   ip_c = ( ip >>  8 ) & 255;
  hide var uint8   ip_d = ( ip       ) & 255;
  hide var string  ip_str = print("%d.%d.%d.%d", ip_a, ip_b, ip_c, ip_d);
  return  ip_str;
}

function string  print_ip4 ( in int64  ip2 )
{
  hide var uint32  ip = 49727;
  hide var uint8   ip_a = ( ip >> 24 ) & 255;
  hide var uint8   ip_b = ( ip >> 16 ) & 255;
  hide var uint8   ip_c = ( ip >>  8 ) & 255;
  hide var uint8   ip_d = ( ip       ) & 255;
  hide var string  ip_str = print("%d.%d.%d.%d", ip_a, ip_b, ip_c, ip_d);
  return  ip_str;
}

###############################################################################
# Print ip
###############################################################################

struct  T_struct_16_16
{
  uint16    val1;
  uint16    val2;
}

###############################################################################
# addition
###############################################################################

function any  addition (in any lhs, in any rhs, in string debug_message = "")
{
  if (debug_message != "")
  {
    print ("%s", debug_message);
  }
  return  (lhs + rhs) ;
}

###############################################################################
# Const
# "::" is mandatory
# Forbidden :
# - array,
# - specifications no_statement, transform, display, constrains ...
# - struct, switch, ...
###############################################################################

const uint16   konst::int = 2;
const float32  konst::flt = -2.6;
const string   konst::str = "abcdefgh - abcdefgh";

enum16 T_enum_for_const
{
  cs_start  -
}

const uint32            konst::int_enum = T_enum_for_const::cs_start;
const T_enum_for_const  konst::enum = T_enum_for_const::cs_start;

const float64  Math::PI = 3.1415927;
const float64  Math::deg_to_rad = Math::PI / 180;

const string   konst::str_fct = string.replace_all (konst::str, "bc", "xyz");

###############################################################################
# Enum
###############################################################################

enum1 T_enum1
{
  value0  0
  value1  -
}

enum2 T_enum2 expand T_enum1
{
  enu2  2
  enu3  -
}

enum3 T_enum3 expand T_enum2
{
  val4  4
  val5  -
}

enum4 T_enum4 expand T_enum3
{
  Val8  8
  Val9  -
  Val10  -
  Val11  -
  Val12  -
  Val13  -
  Val14  -
  Val15  -
}

enum5 T_enum5 as T_enum3;

enum6 T_enum6 as T_enum5;

enum8 T_enum8 as T_enum4;

enum24 T_enum24 expand T_enum5
{
  val12730334  12730334
}

###############################################################################
# string::npos
###############################################################################

function int64  string_find (in string  value, in string  to_find)
{
  hide var  int64  posi = string.find(value, to_find);
  hide var uint32  posu = string.find(value, to_find);
  
  if (posi != posu)
  {
    set do_not_exist_to_triger_exception = 0;
  }
  
  return  posi;
}

function bool8  string_found (in string  value, in string  to_find)
{
  hide var  int64  posi = string.find(value, to_find);
  hide var uint32  posu = string.find(value, to_find);
  hide var bool8   reti = (posi != string::npos);
  hide var bool8   retu = (posu != string::npos);

  if (posi != posu)
  {
    set do_not_exist_to_triger_exception = 0;
  }
  if (reti != retu)
  {
    set do_not_exist_to_triger_exception = 0;
  }
  
  return  reti;
}
